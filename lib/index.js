// Generated by CoffeeScript 1.7.1
(function() {
  var EPub, Q, cheerio, ejs, exec, fs, path, uslug, uuid, _;

  exec = require("child_process").exec;

  path = require("path");

  fs = require("fs");

  Q = require("q");

  _ = require("underscore");

  uslug = require("uslug");

  ejs = require("ejs");

  cheerio = require("cheerio");

  uuid = function() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r;
      r = Math.random() * 16 | 0;
      return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);
    });
  };

  EPub = (function() {
    function EPub(options) {
      var self;
      this.options = options;
      self = this;
      this.defer = new Q.defer();
      if (!options.title || !options.content) {
        console.log("options not valid");
        return false;
      }
      this.options = _.extend({
        description: options.title,
        publisher: "TXT.SX",
        author: ["anonymous"],
        date: new Date().toISOString(),
        lang: "en"
      }, options);
      if (_.isString(this.options.author)) {
        this.options.author = [this.options.author];
      }
      if (_.isEmpty(this.options.author)) {
        this.operator.author = ["anonymous"];
      }
      if (!this.options.tempDir) {
        this.options.tempDir = path.resolve(__dirname, "../tempDir/");
      }
      this.uuid = path.resolve(this.options.tempDir, uuid());
      this.options.uuid = this.uuid;
      console.log(this.uuid);
      this.options.content = _.map(this.options.content, function(content, index) {
        var $, titleSlug;
        titleSlug = uslug(content.title);
        content.filePath = path.resolve(self.uuid, "./OEBPS/" + index + "_" + titleSlug + ".html");
        content.href = "" + index + "_" + titleSlug + ".html";
        content.id = "item_" + index;
        content.author = content.author && _.isString(content.author) ? [content.author] : !content.author || !_.isArray(content.author) ? [] : content.author;
        $ = cheerio.load(content.data);
        if ($("body").length) {
          $ = cheerio.load($("body").html());
        }
        $("img").each(function(index, elem) {
          return console.log(index, $(elem).attr("src"));
        });
        return content;
      });
      this.generateTempFile();
      this.defer.promise;
    }

    EPub.prototype.generateTempFile = function() {
      var self, _base;
      self = this;
      if (!fs.existsSync(this.options.tempDir)) {
        fs.mkdirSync(this.options.tempDir);
      }
      fs.mkdirSync(this.uuid);
      fs.mkdirSync(path.resolve(this.uuid, "./OEBPS"));
      (_base = this.options).css || (_base.css = ".epub-author{color: #555;}.epub-link{margin-bottom: 30px;}.epub-link a{color: #666;font-size: 90%;}.toc-author{font-size: 90%;color: #555;}.toc-link{color: #999;font-size: 85%;display: block;}hr{border: 0;border-bottom: 1px solid #dedede;margin: 60px 10%;}");
      fs.writeFileSync(path.resolve(this.uuid, "./OEBPS/style.css"), this.options.css);
      _.each(this.options.content, function(content, index) {
        var data;
        data = "<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en-US\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>" + content.title + "</title><link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" /></head><body>";
        data += content.title ? "<h1>" + content.title + "</h1>" : "";
        data += content.title && content.author && content.author.length ? "<p class='epub-author'>" + (content.author.join(", ")) + "</p>" : "";
        data += content.title && content.url ? "<p class='epub-link'><a href='" + content.url + "'>" + content.url + "</a></p>" : "";
        data += "" + content.data + "</body></html>";
        return fs.writeFileSync(content.filePath, data);
      });
      fs.writeFileSync(this.uuid + "/mimetype", "application/epub+zip");
      fs.mkdirSync(this.uuid + "/META-INF");
      fs.writeFileSync("" + this.uuid + "/META-INF/container.xml", "<?xml version=\"1.0\" encoding=\"UTF-8\" ?><container version=\"1.0\" xmlns=\"urn:oasis:names:tc:opendocument:xmlns:container\"><rootfiles><rootfile full-path=\"OEBPS/content.opf\" media-type=\"application/oebps-package+xml\"/></rootfiles></container>");
      return Q.all([Q.nfcall(ejs.renderFile, path.resolve(__dirname, "./content.ejs"), self.options), Q.nfcall(ejs.renderFile, path.resolve(__dirname, "./toc.ejs"), self.options), Q.nfcall(ejs.renderFile, path.resolve(__dirname, "./content.html"), self.options)]).spread(function(data1, data2, data3) {
        fs.writeFileSync(path.resolve(self.uuid, "./OEBPS/content.opf"), data1);
        fs.writeFileSync(path.resolve(self.uuid, "./OEBPS/toc.ncx"), data2);
        fs.writeFileSync(path.resolve(self.uuid, "./OEBPS/contents.html"), data3);
        return self.genEpub();
      }, function(err) {
        console.error(arguments);
        self.defer.reject(arguments);
        return false;
      });
    };

    EPub.prototype.runCommand = function(cmd, option) {
      var defer;
      defer = new Q.defer();
      exec(cmd, option, function(err, stderr, stdout) {
        if (err) {
          console.error(cmd, stderr, stdout);
          defer.reject(err);
          return false;
        }
        if (stderr) {
          console.warn(stderr);
        }
        if (stdout && option.quite) {
          console.log(stdout);
        }
        return defer.resolve(stdout);
      });
      return defer.promise;
    };

    EPub.prototype.genEpub = function() {
      var cleanUp, cwd, filename, initCmd, self, zipCmd;
      self = this;
      console.log(this.uuid);
      filename = "book.epub.zip";
      initCmd = "zip -X -0 " + filename + " mimetype";
      zipCmd = "zip -X -9 -r " + filename + " * -x mimetype " + filename;
      cleanUp = "mv " + filename + " book.epub && rm -f -r META-INF OEBPS mimetype";
      cwd = this.uuid;
      return self.runCommand(initCmd, {
        cwd: cwd
      }).then(function() {
        return self.runCommand(zipCmd, {
          cwd: cwd
        }).then(function() {
          return self.runCommand(cleanUp, {
            cwd: cwd
          }).then(function() {
            return self.defer.resolve(self);
          }, function(err) {
            return self.reject(err);
          });
        }, function(err) {
          return self.reject(err);
        });
      }, function(err) {
        return self.reject(err);
      });
    };

    return EPub;

  })();

  module.exports = EPub;

}).call(this);

//# sourceMappingURL=index.map
