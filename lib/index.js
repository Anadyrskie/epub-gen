// Generated by CoffeeScript 1.7.1
(function() {
  var EPub, Q, ejs, exec, fs, path, uslug, uuid, _;

  exec = require("child_process").exec;

  path = require("path");

  fs = require("fs");

  Q = require("q");

  _ = require("underscore");

  uslug = require("uslug");

  ejs = require("ejs");

  uuid = function() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r;
      r = Math.random() * 16 | 0;
      return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);
    });
  };

  EPub = (function() {
    function EPub(options) {
      this.options = options;
      this.defer = new Q.defer();
      if (!options.title || !options.content) {
        console.log("options not valid");
        return false;
      }
      this.options = _.extend({
        description: options.title,
        publisher: "TXT.SX",
        author: "anonymous",
        date: new Date().toLocaleString(),
        lang: "en"
      }, options);
      this.generateTempFile();
    }

    EPub.prototype.generateTempFile = function() {
      var self;
      if (!this.options.tempDir) {
        this.options.tempDir = path.resolve(__dirname, "../tempDir/");
      }
      this.uuid = path.resolve(this.options.tempDir, uuid());
      if (!fs.existsSync(this.options.tempDir)) {
        fs.mkdirSync(this.options.tempDir);
      }
      fs.mkdirSync(this.uuid);
      self = this;
      console.log(this.uuid);
      this.options.content = _.map(this.options.content, function(content, index) {
        var titleSlug;
        titleSlug = uslug(content.title);
        content.filePath = path.resolve(self.uuid, "./OEBPS/" + index + "_" + titleSlug + ".html");
        content.href = "" + index + "_" + titleSlug + ".html";
        content.id = "item_" + index;
        return content;
      });
      fs.mkdirSync(path.resolve(this.uuid, "./OEBPS"));
      _.each(this.options.content, function(content, index) {
        var data;
        data = "<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en-US\">\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n    <title>" + content.title + "</title>\n</head>\n<body>\n" + content.data + "\n</body>\n</html>";
        return fs.writeFileSync(content.filePath, data);
      });
      fs.writeFileSync(this.uuid + "/minetype", "application/epub+zip");
      fs.mkdirSync(this.uuid + "/META-INF");
      fs.writeFileSync("" + this.uuid + "/META-INF/container.xml", "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container version=\"1.0\" xmlns=\"urn:oasis:names:tc:opendocument:xmlns:container\">\n    <rootfiles>\n        <rootfile full-path=\"OEBPS/content.opf\" media-type=\"application/oebps-package+xml\"/>\n    </rootfiles>\n</container>");
      ejs.renderFile(path.resolve(__dirname, "./content.ejs"), self.options, function(err, data) {
        if (err) {
          console.error(err);
          self.defer.reject(err);
          return false;
        }
        fs.writeFileSync(path.resolve(self.uuid, "./OEBPS/content.opf"), data);
        return ejs.renderFile(path.resolve(__dirname, "./toc.ejs"), self.options, function(err, data) {
          if (err) {
            console.error(err);
            self.defer.reject(err);
            return false;
          }
          fs.writeFileSync(path.resolve(self.uuid, "./OEBPS/toc.ncx"), data);
          return self.defer.resolve();
        });
      });
      return self.defer.promise;
    };

    return EPub;

  })();

  module.exports = EPub;

}).call(this);

//# sourceMappingURL=index.map
